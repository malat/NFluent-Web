<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NFluent</name>
    </assembly>
    <members>
        <member name="T:NFluent.BooleanFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a boolean value.
            </summary>
        </member>
        <member name="M:NFluent.BooleanFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Boolean},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.BooleanFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Boolean},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.BooleanFluentAssertionExtensions.IsTrue(NFluent.IFluentAssertion{System.Boolean})">
            <summary>
            Checks that the actual value is true.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not true.</exception>
        </member>
        <member name="M:NFluent.BooleanFluentAssertionExtensions.IsFalse(NFluent.IFluentAssertion{System.Boolean})">
            <summary>
            Checks that the actual value is false.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not false.</exception>
        </member>
        <member name="T:NFluent.ChainableFluentAssertion`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IFluentAssertionBase"/> instances. 
            </summary>
            <typeparam name="T">Type of the <see cref="T:NFluent.IFluentAssertionBase"/> to be chained.</typeparam>
        </member>
        <member name="T:NFluent.IChainableFluentAssertion`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IFluentAssertionBase"/> instances. 
            </summary>
            <typeparam name="T">Type of the <see cref="T:NFluent.IFluentAssertionBase"/> to be chained.</typeparam>
        </member>
        <member name="P:NFluent.IChainableFluentAssertion`1.And">
            <summary>
            Chains a new fluent assertion to the current one.
            </summary>
            <value>
            The new fluent assertion instance which has been chained to the previous one.
            </value>
        </member>
        <member name="M:NFluent.ChainableFluentAssertion`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.ChainableFluentAssertion`1"/> class.
            </summary>
            <param name="previousFluentAssertion">The previous fluent assert.</param>
        </member>
        <member name="P:NFluent.ChainableFluentAssertion`1.And">
            <summary>
            Links a new fluent assertion to the current one.
            </summary>
            <value>
            The new fluent assertion instance which has been linked to the previous one.
            </value>
        </member>
        <member name="T:NFluent.Check">
            <summary>
            Provides <see cref="T:NFluent.IFluentAssertion`1"/> instances to be used in order to make 
            check(s) on the provided value.
            </summary>
        </member>
        <member name="M:NFluent.Check.That``1(``0)">
            <summary>
            Returns a <see cref="T:NFluent.IFluentAssertion`1"/> instance that will provide assertion methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to be tested.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.IFluentAssertion`1"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.IFluentAssertion`1"/> instance will throw a <see cref="T:NFluent.FluentAssertionException"/> when failing.
            </remarks>
        </member>
        <member name="T:NFluent.DateTimeFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a date time instance. 
            </summary>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.DateTime},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.DateTime},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.DateTime})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.DateTime})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsBefore(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly before the given one.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not before the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsBeforeOrEqualTo(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is before or equals to the given one.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not before or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsAfter(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly after the given one.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not after the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsAfterOrEqualTo(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is after or equals to the given one.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not after or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsEqualToIgnoringMillis(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour, minute and second fields,
            (millisecond fields are ignored in comparison).
            Code example :
            <code>
                // successfull assertions
                DateTime dateTime1 = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 0, 0, 1, 456);
                assertThat(dateTime1).isEqualToIgnoringMillis(dateTime2);
                // failing assertions (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 0, 0, 0, 999);
                assertThat(dateTimeA).isEqualToIgnoringMillis(dateTimeB);
            </code>
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not equal to the given one with the milliseconds ignored.</exception>
            <remarks>
            Assertion can fail with dateTimes in same chronological millisecond time window, e.g :
            2000-01-01T00:00:<b>01.000</b> and 2000-01-01T00:00:<b>00.999</b>.
            Assertion fails as second fields differ even if time difference is only 1 millis.
            </remarks>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsEqualToIgnoringSeconds(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour and minute fields,
            (Seconds and millisecond fields are ignored in comparison).
            <code>
            Assertion can fail with DateTimes in same chronological second time window, e.g :
            2000-01-01T00:<b>01:00</b>.000 and 2000-01-01T00:<b>00:59</b>.000.
            Assertion fails as minute fields differ even if time difference is only 1s.
            </code>
            Code example :
            <code>
                // successfull assertions
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 50, 10, 456);
                Check.That(dateTime1).IsEqualToIgnoringSeconds(dateTime2);
                // failing assertions (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 23, 50, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 49, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringSeconds(dateTimeB);
            </code>
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not equal to the given one with second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsEqualToIgnoringMinutes(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day and hour fields,
            (Minutes, seconds and millisecond fields are ignored in comparison).
            <code>
            Assertion can fail with dateTimes in same chronological second time window, e.g :
            2000-01-01T<b>01:00</b>:00.000 and 2000-01-01T<b>00:59:59</b>.000.
            Time difference is only 1s but hour fields differ.
            </code>
            Code example :
            <code>
                // successfull assertions
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 00, 2, 7);
                Check.That(dateTime1).IsEqualToIgnoringMinutes(dateTime2);
                // failing assertions (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 01, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 00, 59, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringMinutes(dateTimeB);
            </code>
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not equal to the given one with minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsEqualToIgnoringHours(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month and day fields,
            * (Hours, minutes, seconds and millisecond fields are ignored in comparison).
            * <code>
            Assertion can fail with dateTimes in same chronological minute time window, e.g :
            2000-01-<b>01T23:59</b>:00.000 and 2000-01-02T<b>00:00</b>:00.000.
            Time difference is only 1min but day fields differ.
            </code>
            Code example :
            <code>
                // successfull assertions
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 00, 00, 00, 000);
                CheckThat(dateTime1).IsEqualToIgnoringHours(dateTime2);
                // failing assertions (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 2, 00, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                CheckThat(dateTimeA).IsEqualToIgnoringHours(dateTimeB);
            </code>
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time is not equal to the given one with hour, minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsInSameYearAs(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time year is not equal to the given year.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsInSameMonthAs(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same month.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time month is not equal to the given month.</exception>
        </member>
        <member name="M:NFluent.DateTimeFluentAssertionExtensions.IsInSameDayAs(NFluent.IFluentAssertion{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same day.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual date time day is not equal to the given day.</exception>
        </member>
        <member name="T:NFluent.EnumerableExtensions">
            <summary>
            Extension methods for adding new fluent methods to enumerable.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable)">
            <summary>
            Return a string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@,System.String)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable"/>.</param>
            <param name="separator">The separator.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a separator.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.String)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="separator">The separator.</param>
            <returns>A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by the given separator.</returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by the given separator.
        </member>
        <member name="T:NFluent.Helpers.EqualityHelper">
            <summary>
            Helper class related to Equality methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.EqualityHelper.IsEqualTo(System.Object,System.Object)">
            <summary>
            Checks that a given instance is considered to be equal to another expected instance. Throws <see cref="T:NFluent.FluentAssertionException"/> otherwise.
            </summary>
            <param name="instance">The considered instance.</param>
            <param name="expected">The expected instance.</param>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.Helpers.EqualityHelper.IsNotEqualTo(System.Object,System.Object)">
            <summary>
            Checks that a given instance is not considered to be equal to another expected instance. Throws <see cref="T:NFluent.FluentAssertionException"/> otherwise.
            </summary>
            <param name="instance">The considered instance.</param>
            <param name="expected">The expected instance.</param>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="T:NFluent.Extensions.ExtensionsCommonHelpers">
            <summary>
            Common helper methods for the NFluent extension methods.
            </summary>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Object)">
            <summary>
            Returns a string that represents the current object. If the object is already a string, this method will surround it with brackets.
            </summary>
            <param name="theObject">The theObject.</param>
            <returns>A string that represents the current object. If the object is already a string, this method will surround it with brackets.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.DateTime)">
            <summary>
            Returns a string that represents the current DateTime.         
            </summary>
            <param name="theDateTime">The DateTime.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Boolean)">
            <summary>
            Returns a string that represents the current Boolean.         
            </summary>
            <param name="theBoolean">The Boolean.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="T:NFluent.IFluentAssertionBase">
            <summary>
            Provides fluent assertion methods to be executed on the system under test (sut).
            Every method should return a <see cref="T:NFluent.IChainableFluentAssertion`1"/> instance
            of the same fluent assertion type (closure of operations), or throw an 
            <see cref="T:NFluent.FluentAssertionException"/> when failing.
            This 'marker' interface is mandatory for the chainable assertion mechanism. 
            </summary>
        </member>
        <member name="T:NFluent.NumberFluentAssertion`1">
            <summary>
            Provides assertion methods to be executed on a number instance.
            </summary>
            <typeparam name="N">Type of the numerical value.</typeparam>
        </member>
        <member name="T:NFluent.IFluentAssertion`1">
            <summary>
            Provides assertion methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
        </member>
        <member name="P:NFluent.IFluentAssertion`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent assertion extension method.
            </value>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.NumberFluentAssertion`1"/> class.
            </summary>
            <param name="number">The number to assert on.</param>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsZero">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsNotZero">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <returns>
            <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsPositive">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <returns>A chainable assertion.</returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsEqualTo(System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <returns>A chainable assertion.</returns>
            <param name="expected">The expected value.</param>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsNotEqualTo(System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <returns>A chainable assertion.</returns>
            <param name="expected">The expected value.</param>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsInstanceOf``1">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.IsNotInstanceOf``1">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.NumberFluentAssertion`1.InternalIsZero(`0)">
            <summary>
            Checks whether a given value is equal to zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is equal to zero; false otherwise.
            </returns>
        </member>
        <member name="P:NFluent.NumberFluentAssertion`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent assertion extension method.
            </value>
        </member>
        <member name="T:NFluent.FluentAssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NFluent.FluentAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentAssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:NFluent.ComparableFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on an <see cref="T:System.IComparable"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.ComparableFluentAssertionExtensions.IsBefore(NFluent.IFluentAssertion{System.IComparable},System.IComparable)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="otherValue">The other value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The current value is not before the other one.</exception>
        </member>
        <member name="T:NFluent.ByteFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Byte},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Byte},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Byte})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Byte})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Byte})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Byte})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Byte})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.ShortFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Int16},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Int16},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Int16})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Int16})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Int16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Int16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Int16})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.FloatFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Single},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Single},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Single})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Single})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Single})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Single})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Single})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.DoubleFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Double},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Double},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Double})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Double})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Double})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Double})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Double})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.LongFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Int64},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Int64},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Int64})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Int64})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Int64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Int64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Int64})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.DecimalFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a decimal value.
            </summary>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Decimal},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Decimal},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Decimal})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Decimal})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Decimal})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Decimal})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Decimal})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.EnumerableFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on an <see cref="T:System.Collections.IEnumerable"/> value.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Collections.IEnumerable})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Collections.IEnumerable})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.Contains``1(NFluent.IFluentAssertion{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains all the given expected values, in any order.
            </summary>
            <typeparam name="T">Type of the elements contained in the enumerable.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contain all the expected values.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.Contains(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains all the values present in another enumerable, in any order.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="otherEnumerable">The enumerable containing the expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contain all the expected values present in the other enumerable.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ContainsOnly``1(NFluent.IFluentAssertion{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains only the given values and nothing else, in any order.
            </summary>
            <typeparam name="T">Type of the expected values to be found.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contain only the expected values provided.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ContainsOnly(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains only the values present in another enumerable, and nothing else, in any order.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contain only the expected values present in the other enumerable.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ContainsExactly``1(NFluent.IFluentAssertion{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains only the given expected values and nothing else, in order.
            This assertion should only be used with IEnumerable that have a consistent iteration order
            (i.e. don't use it with <see cref="T:System.Collections.Hashtable"/>, prefer <see cref="M:NFluent.EnumerableFluentAssertionExtensions.ContainsOnly``1(NFluent.IFluentAssertion{System.Collections.IEnumerable},``0[])"/> in that case).
            </summary>
            <typeparam name="T">Type of the elements to be found.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contains only the exact given values and nothing else, in order.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ContainsExactly(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains only the values of another enumerable and nothing else, in order.
            This assertion should only be used with IEnumerable that have a consistent iteration order
            (i.e. don't use it with <see cref="T:System.Collections.Hashtable"/>, prefer <see cref="M:NFluent.EnumerableFluentAssertionExtensions.ContainsOnly``1(NFluent.IFluentAssertion{System.Collections.IEnumerable},``0[])"/> in that case).
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="otherEnumerable">The other enumerable containing the exact expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable does not contains only the exact given values and nothing else, in order.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.HasSize(NFluent.IFluentAssertion{System.Collections.IEnumerable},System.Int64)">
            <summary>
            Checks that the enumerable has the proper number of elements.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedSize">The expected size to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable has not the expected number of elements.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.IsEmpty(NFluent.IFluentAssertion{System.Collections.IEnumerable})">
            <summary>
            Checks that the enumerable is empty.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The enumerable is not empty.</exception>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ExtractNotFoundValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns all expected values that aren't present in the enumerable.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The expected values to search within the enumerable.</param>
            <returns>
            A list containing all the expected values that aren't present in the enumerable.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.ExtractUnexpectedValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns all the values of the enumerable that don't belong to the expected ones.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The allowed values to be part of the enumerable.</param>
            <returns>
            A list with all the values found in the enumerable that don't belong to the expected ones.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentAssertionExtensions.FormatItemCount(System.Int64)">
            <summary>
            Generates the proper description for the items count, based on their numbers.
            </summary>
            <param name="itemsCount">The number of items.</param>
            <returns>
            The proper description for the items count.
            </returns>
        </member>
        <member name="T:NFluent.ObjectFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on an object instance.
            </summary>
        </member>
        <member name="M:NFluent.ObjectFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Object},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Object},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Object})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.ObjectFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Object})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="T:NFluent.FluentAssertion`1">
            <summary>
            Provides assertion methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
        </member>
        <member name="M:NFluent.FluentAssertion`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentAssertion`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:NFluent.FluentAssertion`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent assertion extension method.
            </value>
        </member>
        <member name="T:NFluent.IntFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on an integer value.
            </summary>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.Int32},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.Int32},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.Int32})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.Int32})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.Int32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.Int32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.Int32})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.Helpers.IsInstanceHelper">
            <summary>
            Helper class related to Is(Not)Instance methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.IsInstanceOf(System.Object,System.Type)">
            <summary>
            Checks that an instance is of the given expected type.
            </summary>
            <param name="instance">The instance to be checked.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:NFluent.FluentAssertionException">The instance is not of the expected type.</exception>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.IsNotInstanceOf(System.Object,System.Type)">
            <summary>
            Checks that an instance is not of the given expected type.
            </summary>
            <param name="instance">The instance to be checked.</param>
            <param name="typeNotExpected">The type not expected.</param>
            <exception cref="T:NFluent.FluentAssertionException">The instance is of the type not expected.</exception>
        </member>
        <member name="T:NFluent.PropertiesExtensions">
            <summary>
            Extension methods for exploiting enumerable content in a fluent manner (i.e. with auto completion support and in an english readable way).
            </summary>
        </member>
        <member name="M:NFluent.PropertiesExtensions.Properties``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Extract all the values of a given property given its name, from an enumerable collection of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the collection.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The object of type <typeparamref name="T"/> don't have a property with the given property name.</exception>
        </member>
        <member name="M:NFluent.PropertiesExtensions.Properties``1(``0[],System.String)">
            <summary>
            Extract all the values of a given property given its name, from an array of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the array.</typeparam>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the array.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="T:NFluent.StringFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a string instance.
            </summary>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.String},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.String},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.String})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.String})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.Contains(NFluent.IFluentAssertion{System.String},System.String[])">
            <summary>
            Checks that the string contains the given expected values, in any order.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="values">The expected values to be found.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The string does not contains all the given strings in any order.</exception>
        </member>
        <member name="M:NFluent.StringFluentAssertionExtensions.StartsWith(NFluent.IFluentAssertion{System.String},System.String)">
            <summary>
            Checks that the string starts with the given expected prefix.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expectedPrefix">The expected prefix.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The string does not start with the expected prefix.</exception>
        </member>
        <member name="T:NFluent.UIntFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.UInt32},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.UInt32},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.UInt32})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.UInt32})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.UInt32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.UInt32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UIntFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.UInt32})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.ULongFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.UInt64},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.UInt64},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.UInt64})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.UInt64})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.UInt64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.UInt64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ULongFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.UInt64})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.UShortFluentAssertionExtensions">
            <summary>
            Provides assertion methods to be executed on a long value.
            </summary>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsEqualTo(NFluent.IFluentAssertion{System.UInt16},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsNotEqualTo(NFluent.IFluentAssertion{System.UInt16},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsInstanceOf``1(NFluent.IFluentAssertion{System.UInt16})">
            <summary>
            Checks that the actual instance is an instance of the given type.
            </summary>
            <typeparam name="T">The expected Type of the instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is not of the provided type.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsNotInstanceOf``1(NFluent.IFluentAssertion{System.UInt16})">
            <summary>
            Checks that the actual instance is not an instance of the given type.
            </summary>
            <typeparam name="T">The type not expected for this instance.</typeparam>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable fluent assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The actual instance is of the provided type.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsZero(NFluent.IFluentAssertion{System.UInt16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsNotZero(NFluent.IFluentAssertion{System.UInt16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
              <returns>A chainable assertion.</returns>
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UShortFluentAssertionExtensions.IsPositive(NFluent.IFluentAssertion{System.UInt16})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="fluentAssertion">The fluent assertion to be extended.</param>
            <returns>
            A chainable assertion.
            </returns>
            <exception cref="T:NFluent.FluentAssertionException">The value is not strictly positive.</exception>
        </member>
    </members>
</doc>
